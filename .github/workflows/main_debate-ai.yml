# # Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# # More GitHub Actions for Azure: https://github.com/Azure/actions

# name: Build and deploy Node.js app to Azure Web App - debate-ai

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js version
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18.x'

#       - name: npm install, build, and test
#         run: |
#           npm install
#           npm run build --if-present
#           npm run test --if-present

#       - name: Zip artifact for deployment
#         run: zip release.zip ./* -r

#       - name: Upload artifact for deployment job
#         uses: actions/upload-artifact@v4
#         with:
#           name: node-app
#           path: release.zip

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: 'Production'
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v4
#         with:
#           name: node-app

#       - name: Unzip artifact for deployment
#         run: unzip release.zip

#       - name: 'Deploy to Azure Web App'
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v3
#         with:
#           app-name: 'debate-ai'
#           slot-name: 'Production'
#           package: .
#           publish-profile: ${{ secrets.azureWebAppPublishProfile }}
#           deployment-method: 'zipDeploy'

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to main branch
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x] # Specify Node.js version

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Install dependencies for backend
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm install

      # Install dependencies for frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      # Build the backend
      - name: Build Backend
        working-directory: ./backend
        run: npm run build # Ensure you have a build script

      # List output directory
      - name: List output directory
        run: ls -alh ./dist
        working-directory: ./backend

      # Build the frontend
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build # Vite's build script

      # List output directory
      - name: List output directory
        run: ls -alh ./dist
        working-directory: ./frontend

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      # Prepare deployment package
      - name: Prepare Deployment Package
        run: |
          mkdir deployment
          cp -r backend/dist deployment/backend
          cp -r frontend/dist deployment/frontend
          # Optionally, include other necessary files like package.json, etc.

      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          slot-name: "Production"
          publish-profile: ${{ secrets.azureWebAppPublishProfile }}
          package: ./deployment # Path to the deployment package

      # Optional: Clean up
      - name: Clean Up
        run: rm -rf deployment
